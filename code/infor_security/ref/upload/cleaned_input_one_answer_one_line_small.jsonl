{"Score": 1, "Title": "MySQL/Postgres: LAST_INSERT_ID() / LASTVAL() different behaviour", "Body": "I have a simple trigger setup both in mysql and postgres.\nThis trigger inserts a row in a logging table when a row is inserted in the main table.\nWhen I now insert a row in the main table, mysql / postgres shows a different behaviour, if I call one of the following functions afterwards:\n\nSELECT LAST_INSERT_ID(): returns the id of the row in the main table\nSELECT LASTVAL(): returns the id of the row in the logging table\n\nIs this intentional and a reliable behaviour?\n", "Tags": "<mysql><postgresql>", "Answer_Score": 1, "Answer_Body": "Yes, this is by design and obviously intentional.\n\n\n", "line_num": 181193}
{"Score": 1, "Title": "how to start multi instances in one mysql docker container", "Body": "I want to deploy data slot to the distributed mysql databases via middleware\uff0cneed one mysql docker container running two instances with different port, eg. 3306 and 3316.\ntried many ways, such as:\n\nAdd mysql_3316.sh:\n#!/bin/bash\n/entrypoint.sh --defaults-file=/etc/mysql/my_3316.cnf\nin the rc.local:\n#!/bin/sh -e\n/usr/local/bin/mysql_3316.sh || exit 1\nexit 0\nand modified the Dockerfile like below,\nRUN touch /etc/mysql/my_3316.cnf\nCOPY mysql_3316.sh /usr/local/bin/mysql_3316.sh\nRUN chmod +x /usr/local/bin/mysql_3316.sh\nCOPY rc.local /etc/rc.local\nRUN chmod +x /etc/rc.local\nRUN chown root:root /etc/rc.local\nENTRYPOINT [\"docker-entrypoint.sh\"]\nEXPOSE 3306 3316\nCMD [\"mysqld\"]\nit doesn't work while the mysql container comes up, but the 3316 mysql \nport instance works by run the /entrypoint.sh --defaults-file=/etc/mysql/my_3316.cnf shell line manually.\ntried the init.d ,\nRUN touch /etc/mysql/my_3316.cnf\nCOPY mysql_3316.sh /etc/init.d/mysql_3316\nRUN chmod +x /etc/init.d/mysql_3316\nRUN update-rc.d mysql_3316 defaults 99\nENTRYPOINT [\"docker-entrypoint.sh\"]\nEXPOSE 3306 3316\nCMD [\"mysqld\"]\ndoesn't work too.\ntried the crontab,\n@reboot  /usr/local/bin/mysql_3316.sh\n #Don't remove the empty line at the end of this file. It is required to run the cron job\nand the Dockerfile as that,\nCOPY mysql_3316.sh /usr/local/bin/mysql_3316.sh\nRUN chmod +x /usr/local/bin/mysql_3316.sh\nADD crontab /etc/cron.d/docker-cron\nRUN chmod +x /etc/cron.d/docker-cron\nRUN crontab /etc/cron.d/docker-cron\nENTRYPOINT [\"docker-entrypoint.sh\"]\nEXPOSE 3306 3316\nCMD [\"mysqld\"]\ndoesn't work third.\n\nIt's been spent much on this key, almost give up...\nAny kindly suggestion are welcomed please.\nThe docker-compose.yml for mysql right here:\nservices:\n mysql:\n image: mysql:latest\n container_name: mysql\n hostname: mysql\n restart: unless-stopped\n networks:\n   dockernet:\n     ipv4_address: 172.18.0.5\n ports:\n   - 3306:3306\n   - 3316:3316\n volumes:\n   - /Docker/mysql/:/var/lib/mysql/\n   - ./docker/mysql/mysql/my.cnf:/etc/mysql/my.cnf\n   - ./docker/mysql/mysql/my_3316.cnf:/etc/mysql/my_3316.cnf\n   - ./docker/mysql/mysql/logs/:/var/log/mysql/\n   - ./docker/mysql/mysql/init/:/docker-entrypoint-initdb.d/\n entrypoint: ['/entrypoint.sh', '--default-authentication-plugin=mysql_native_password']\n\n", "Tags": "<mysql><docker>", "Answer_Score": 1, "Answer_Body": "Normally you do NOT want to run more than one process in the same container. Despite your title I really think that what you are looking for is to start two containers, both from a MySQL image.\nYou should not need to change any startup scripts, Dockerfile or anything else to start up similar containers bound to different ports.\nRemember that the EXPOSE command only exposes the ports to different containers, not to the outside world.\nTo access the port you need to use the -p flag with your docker run: https://docs.docker.com/engine/reference/run/#expose-incoming-ports\nYou can use the same docker image from the same Dockerfile. Just give different -p parameter when you run.\nEdit:\nYou added your docker-compose.yml after my initial response. Using docker-compose will make my advice about -p obsolete, and you should use the ports: section of the docker-compose.yml to vary the port numbers instead.\nThis answer, however, might not be what you are looking for because based on your comment I think I do not fully understand your use case here.\n", "line_num": 181194}
{"Score": 2, "Title": "Laravel MySQL JSON LIKE Query", "Body": "In laravel using eloquent I can use LIKE query like this:\nModel::where('column', 'LIKE', 'a%');\n\nThat query the column that starts with letter a. How can I do it in a json column?.\nModel::where('meta->column', 'LIKE', 'a%');\n\nI tried it but not getting any result where querying it like this:\nModel::where('meta->column', 'LIKE', '%a%');\n\nReturns a result where column contains letter a. I only want to query the column where it starts with letter a.\n", "Tags": "<mysql><json><laravel><laravel-5.6><mysql-5.7>", "Answer_Score": 4, "Answer_Body": "In MySQL, the result of meta->column is JSON encoded. You have to add the leading quote:\nModel::where('meta->column', 'LIKE', '\"a%');\n\nIn Laravel 5.6.28 you can use the ->> operator:\nModel::where('meta->>column', 'LIKE', 'a%');\n\n", "line_num": 181195}
